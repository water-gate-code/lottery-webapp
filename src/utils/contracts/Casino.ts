/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type GamblerStruct = {
  id: PromiseOrValue<string>;
  choice: PromiseOrValue<BigNumberish>;
};

export type GamblerStructOutput = [string, BigNumber] & {
  id: string;
  choice: BigNumber;
};

export type DisplayInfoStruct = {
  id: PromiseOrValue<string>;
  host: PromiseOrValue<string>;
  gameType: PromiseOrValue<BigNumberish>;
  wager: PromiseOrValue<BigNumberish>;
  isActive: PromiseOrValue<boolean>;
  gamblers: GamblerStruct[];
};

export type DisplayInfoStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  boolean,
  GamblerStructOutput[]
] & {
  id: string;
  host: string;
  gameType: BigNumber;
  wager: BigNumber;
  isActive: boolean;
  gamblers: GamblerStructOutput[];
};

export interface CasinoInterface extends utils.Interface {
  functions: {
    "createGame(uint256,uint256)": FunctionFragment;
    "getGame(address)": FunctionFragment;
    "getGames()": FunctionFragment;
    "playGame(address,uint256)": FunctionFragment;
    "playGameWithDefaultHost(uint256,uint256)": FunctionFragment;
    "rawFulfillRandomWords(uint256,uint256[])": FunctionFragment;
    "requestRandom(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createGame"
      | "getGame"
      | "getGames"
      | "playGame"
      | "playGameWithDefaultHost"
      | "rawFulfillRandomWords"
      | "requestRandom"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createGame",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGame",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "getGames", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playGame",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "playGameWithDefaultHost",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "requestRandom",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "createGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getGames", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "playGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playGameWithDefaultHost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRandom",
    data: BytesLike
  ): Result;

  events: {
    "CompleteGame_Event(address,address)": EventFragment;
    "CreateGame_Event(tuple)": EventFragment;
    "VrfRequest_Event(address,uint256)": EventFragment;
    "VrfResponse_Event(uint256,uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CompleteGame_Event"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateGame_Event"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VrfRequest_Event"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VrfResponse_Event"): EventFragment;
}

export interface CompleteGame_EventEventObject {
  game: string;
  winner: string;
}
export type CompleteGame_EventEvent = TypedEvent<
  [string, string],
  CompleteGame_EventEventObject
>;

export type CompleteGame_EventEventFilter =
  TypedEventFilter<CompleteGame_EventEvent>;

export interface CreateGame_EventEventObject {
  game: DisplayInfoStructOutput;
}
export type CreateGame_EventEvent = TypedEvent<
  [DisplayInfoStructOutput],
  CreateGame_EventEventObject
>;

export type CreateGame_EventEventFilter =
  TypedEventFilter<CreateGame_EventEvent>;

export interface VrfRequest_EventEventObject {
  game: string;
  requestId: BigNumber;
}
export type VrfRequest_EventEvent = TypedEvent<
  [string, BigNumber],
  VrfRequest_EventEventObject
>;

export type VrfRequest_EventEventFilter =
  TypedEventFilter<VrfRequest_EventEvent>;

export interface VrfResponse_EventEventObject {
  requestId: BigNumber;
  randomWords: BigNumber[];
}
export type VrfResponse_EventEvent = TypedEvent<
  [BigNumber, BigNumber[]],
  VrfResponse_EventEventObject
>;

export type VrfResponse_EventEventFilter =
  TypedEventFilter<VrfResponse_EventEvent>;

export interface Casino extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CasinoInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createGame(
      gameType: PromiseOrValue<BigNumberish>,
      choice: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getGame(
      targetGame: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[DisplayInfoStructOutput]>;

    getGames(overrides?: CallOverrides): Promise<[DisplayInfoStructOutput[]]>;

    playGame(
      targetGame: PromiseOrValue<string>,
      choice: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    playGameWithDefaultHost(
      gameType: PromiseOrValue<BigNumberish>,
      choice: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestRandom(
      gameAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createGame(
    gameType: PromiseOrValue<BigNumberish>,
    choice: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getGame(
    targetGame: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<DisplayInfoStructOutput>;

  getGames(overrides?: CallOverrides): Promise<DisplayInfoStructOutput[]>;

  playGame(
    targetGame: PromiseOrValue<string>,
    choice: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  playGameWithDefaultHost(
    gameType: PromiseOrValue<BigNumberish>,
    choice: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rawFulfillRandomWords(
    requestId: PromiseOrValue<BigNumberish>,
    randomWords: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestRandom(
    gameAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createGame(
      gameType: PromiseOrValue<BigNumberish>,
      choice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getGame(
      targetGame: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<DisplayInfoStructOutput>;

    getGames(overrides?: CallOverrides): Promise<DisplayInfoStructOutput[]>;

    playGame(
      targetGame: PromiseOrValue<string>,
      choice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    playGameWithDefaultHost(
      gameType: PromiseOrValue<BigNumberish>,
      choice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    requestRandom(
      gameAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CompleteGame_Event(address,address)"(
      game?: null,
      winner?: null
    ): CompleteGame_EventEventFilter;
    CompleteGame_Event(
      game?: null,
      winner?: null
    ): CompleteGame_EventEventFilter;

    "CreateGame_Event(tuple)"(game?: null): CreateGame_EventEventFilter;
    CreateGame_Event(game?: null): CreateGame_EventEventFilter;

    "VrfRequest_Event(address,uint256)"(
      game?: null,
      requestId?: null
    ): VrfRequest_EventEventFilter;
    VrfRequest_Event(
      game?: null,
      requestId?: null
    ): VrfRequest_EventEventFilter;

    "VrfResponse_Event(uint256,uint256[])"(
      requestId?: null,
      randomWords?: null
    ): VrfResponse_EventEventFilter;
    VrfResponse_Event(
      requestId?: null,
      randomWords?: null
    ): VrfResponse_EventEventFilter;
  };

  estimateGas: {
    createGame(
      gameType: PromiseOrValue<BigNumberish>,
      choice: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getGame(
      targetGame: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGames(overrides?: CallOverrides): Promise<BigNumber>;

    playGame(
      targetGame: PromiseOrValue<string>,
      choice: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    playGameWithDefaultHost(
      gameType: PromiseOrValue<BigNumberish>,
      choice: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestRandom(
      gameAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createGame(
      gameType: PromiseOrValue<BigNumberish>,
      choice: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getGame(
      targetGame: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGames(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    playGame(
      targetGame: PromiseOrValue<string>,
      choice: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    playGameWithDefaultHost(
      gameType: PromiseOrValue<BigNumberish>,
      choice: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestRandom(
      gameAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
