/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type GamblerStruct = { id: AddressLike; choice: BigNumberish };

export type GamblerStructOutput = [id: string, choice: bigint] & {
  id: string;
  choice: bigint;
};

export type DisplayInfoStruct = {
  id: AddressLike;
  wager: BigNumberish;
  gameType: BigNumberish;
  gamblers: GamblerStruct[];
};

export type DisplayInfoStructOutput = [
  id: string,
  wager: bigint,
  gameType: bigint,
  gamblers: GamblerStructOutput[]
] & {
  id: string;
  wager: bigint;
  gameType: bigint;
  gamblers: GamblerStructOutput[];
};

export interface CasinoInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createGame"
      | "getActiveGames"
      | "getGame"
      | "getGames"
      | "playGame"
      | "rawFulfillRandomWords"
      | "requestRandom"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CompleteGame_Event"
      | "CreateGame_Event"
      | "RandomRequestTest_Event"
      | "RandomResultTest_Event"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createGame",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveGames",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGame",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getGames", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playGame",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "requestRandom",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "createGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActiveGames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getGames", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "playGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRandom",
    data: BytesLike
  ): Result;
}

export namespace CompleteGame_EventEvent {
  export type InputTuple = [winner: AddressLike];
  export type OutputTuple = [winner: string];
  export interface OutputObject {
    winner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreateGame_EventEvent {
  export type InputTuple = [game: DisplayInfoStruct];
  export type OutputTuple = [game: DisplayInfoStructOutput];
  export interface OutputObject {
    game: DisplayInfoStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RandomRequestTest_EventEvent {
  export type InputTuple = [requestId: BigNumberish];
  export type OutputTuple = [requestId: bigint];
  export interface OutputObject {
    requestId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RandomResultTest_EventEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    randomWords: BigNumberish[]
  ];
  export type OutputTuple = [requestId: bigint, randomWords: bigint[]];
  export interface OutputObject {
    requestId: bigint;
    randomWords: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Casino extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: CasinoInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createGame: TypedContractMethod<
    [gameType: BigNumberish, choice: BigNumberish],
    [void],
    "payable"
  >;

  getActiveGames: TypedContractMethod<[], [DisplayInfoStructOutput[]], "view">;

  getGame: TypedContractMethod<
    [targetGame: AddressLike],
    [DisplayInfoStructOutput],
    "view"
  >;

  getGames: TypedContractMethod<[], [DisplayInfoStructOutput[]], "view">;

  playGame: TypedContractMethod<
    [targetGame: AddressLike, choice: BigNumberish],
    [void],
    "payable"
  >;

  rawFulfillRandomWords: TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  requestRandom: TypedContractMethod<
    [gameAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createGame"
  ): TypedContractMethod<
    [gameType: BigNumberish, choice: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getActiveGames"
  ): TypedContractMethod<[], [DisplayInfoStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getGame"
  ): TypedContractMethod<
    [targetGame: AddressLike],
    [DisplayInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGames"
  ): TypedContractMethod<[], [DisplayInfoStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "playGame"
  ): TypedContractMethod<
    [targetGame: AddressLike, choice: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "rawFulfillRandomWords"
  ): TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestRandom"
  ): TypedContractMethod<[gameAddress: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "CompleteGame_Event"
  ): TypedContractEvent<
    CompleteGame_EventEvent.InputTuple,
    CompleteGame_EventEvent.OutputTuple,
    CompleteGame_EventEvent.OutputObject
  >;
  getEvent(
    key: "CreateGame_Event"
  ): TypedContractEvent<
    CreateGame_EventEvent.InputTuple,
    CreateGame_EventEvent.OutputTuple,
    CreateGame_EventEvent.OutputObject
  >;
  getEvent(
    key: "RandomRequestTest_Event"
  ): TypedContractEvent<
    RandomRequestTest_EventEvent.InputTuple,
    RandomRequestTest_EventEvent.OutputTuple,
    RandomRequestTest_EventEvent.OutputObject
  >;
  getEvent(
    key: "RandomResultTest_Event"
  ): TypedContractEvent<
    RandomResultTest_EventEvent.InputTuple,
    RandomResultTest_EventEvent.OutputTuple,
    RandomResultTest_EventEvent.OutputObject
  >;

  filters: {
    "CompleteGame_Event(address)": TypedContractEvent<
      CompleteGame_EventEvent.InputTuple,
      CompleteGame_EventEvent.OutputTuple,
      CompleteGame_EventEvent.OutputObject
    >;
    CompleteGame_Event: TypedContractEvent<
      CompleteGame_EventEvent.InputTuple,
      CompleteGame_EventEvent.OutputTuple,
      CompleteGame_EventEvent.OutputObject
    >;

    "CreateGame_Event(tuple)": TypedContractEvent<
      CreateGame_EventEvent.InputTuple,
      CreateGame_EventEvent.OutputTuple,
      CreateGame_EventEvent.OutputObject
    >;
    CreateGame_Event: TypedContractEvent<
      CreateGame_EventEvent.InputTuple,
      CreateGame_EventEvent.OutputTuple,
      CreateGame_EventEvent.OutputObject
    >;

    "RandomRequestTest_Event(uint256)": TypedContractEvent<
      RandomRequestTest_EventEvent.InputTuple,
      RandomRequestTest_EventEvent.OutputTuple,
      RandomRequestTest_EventEvent.OutputObject
    >;
    RandomRequestTest_Event: TypedContractEvent<
      RandomRequestTest_EventEvent.InputTuple,
      RandomRequestTest_EventEvent.OutputTuple,
      RandomRequestTest_EventEvent.OutputObject
    >;

    "RandomResultTest_Event(uint256,uint256[])": TypedContractEvent<
      RandomResultTest_EventEvent.InputTuple,
      RandomResultTest_EventEvent.OutputTuple,
      RandomResultTest_EventEvent.OutputObject
    >;
    RandomResultTest_Event: TypedContractEvent<
      RandomResultTest_EventEvent.InputTuple,
      RandomResultTest_EventEvent.OutputTuple,
      RandomResultTest_EventEvent.OutputObject
    >;
  };
}
